//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VisaNetTest.WCFClientes {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClienteExcepciones", Namespace="http://schemas.datacontract.org/2004/07/WCFCienteServices.Errores")]
    [System.SerializableAttribute()]
    public partial class ClienteExcepciones : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string codigoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descripcionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string codigo {
            get {
                return this.codigoField;
            }
            set {
                if ((object.ReferenceEquals(this.codigoField, value) != true)) {
                    this.codigoField = value;
                    this.RaisePropertyChanged("codigo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string descripcion {
            get {
                return this.descripcionField;
            }
            set {
                if ((object.ReferenceEquals(this.descripcionField, value) != true)) {
                    this.descripcionField = value;
                    this.RaisePropertyChanged("descripcion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFClientes.IClientesService")]
    public interface IClientesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientesService/ObtenerCliente", ReplyAction="http://tempuri.org/IClientesService/ObtenerClienteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VisaNetTest.WCFClientes.ClienteExcepciones), Action="http://tempuri.org/IClientesService/ObtenerClienteClienteExcepcionesFault", Name="ClienteExcepciones", Namespace="http://schemas.datacontract.org/2004/07/WCFCienteServices.Errores")]
        WCFCienteServices.Dominio.Cliente ObtenerCliente(int codigo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientesService/ObtenerCliente", ReplyAction="http://tempuri.org/IClientesService/ObtenerClienteResponse")]
        System.Threading.Tasks.Task<WCFCienteServices.Dominio.Cliente> ObtenerClienteAsync(int codigo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientesService/ValidarExisteCliente", ReplyAction="http://tempuri.org/IClientesService/ValidarExisteClienteResponse")]
        bool ValidarExisteCliente(int codigoCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientesService/ValidarExisteCliente", ReplyAction="http://tempuri.org/IClientesService/ValidarExisteClienteResponse")]
        System.Threading.Tasks.Task<bool> ValidarExisteClienteAsync(int codigoCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientesService/EvaluarCliente", ReplyAction="http://tempuri.org/IClientesService/EvaluarClienteResponse")]
        void EvaluarCliente(int dni, string ruc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientesService/EvaluarCliente", ReplyAction="http://tempuri.org/IClientesService/EvaluarClienteResponse")]
        System.Threading.Tasks.Task EvaluarClienteAsync(int dni, string ruc);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientesServiceChannel : VisaNetTest.WCFClientes.IClientesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientesServiceClient : System.ServiceModel.ClientBase<VisaNetTest.WCFClientes.IClientesService>, VisaNetTest.WCFClientes.IClientesService {
        
        public ClientesServiceClient() {
        }
        
        public ClientesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFCienteServices.Dominio.Cliente ObtenerCliente(int codigo) {
            return base.Channel.ObtenerCliente(codigo);
        }
        
        public System.Threading.Tasks.Task<WCFCienteServices.Dominio.Cliente> ObtenerClienteAsync(int codigo) {
            return base.Channel.ObtenerClienteAsync(codigo);
        }
        
        public bool ValidarExisteCliente(int codigoCliente) {
            return base.Channel.ValidarExisteCliente(codigoCliente);
        }
        
        public System.Threading.Tasks.Task<bool> ValidarExisteClienteAsync(int codigoCliente) {
            return base.Channel.ValidarExisteClienteAsync(codigoCliente);
        }
        
        public void EvaluarCliente(int dni, string ruc) {
            base.Channel.EvaluarCliente(dni, ruc);
        }
        
        public System.Threading.Tasks.Task EvaluarClienteAsync(int dni, string ruc) {
            return base.Channel.EvaluarClienteAsync(dni, ruc);
        }
    }
}
